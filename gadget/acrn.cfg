set timeout=10
set timeout_style=menu

load_env --file $prefix/grubenv kernel_status

set kernel=kernel.efi
set cmdline="console=ttyS0 console=tty1 panic=-1"

if [ "$kernel_status" = "try" ]; then
    # a new kernel got installed
    set kernel_status="trying"
    save_env kernel_status

    # use try-kernel.efi
    set kernel=try-kernel.efi
elif [ "$kernel_status" = "trying" ]; then
    # nothing cleared the "trying snap" so the boot failed
    # we clear the mode and boot normally
    set kernel_status=""
    save_env kernel_status
elif [ -n "$kernel_status" ]; then
    # ERROR invalid kernel_status state, reset to empty
    echo "invalid kernel_status!!!"
    echo "resetting to empty"
    set kernel_status=""
    save_env kernel_status
fi

if [ -e $prefix/$kernel ]; then
menuentry "Run Ubuntu Core 20" {
    # use $prefix because the symlink manipulation at runtime for kernel snap
    # upgrades, etc. should only need the /boot/grub/ directory, not the
    # /EFI/ubuntu/ directory
    chainloader $prefix/$kernel snapd_recovery_mode=run $cmdline
}
fi

if [ -e ($root)/EFI/acrn/acrn.bin ]; then
menuentry "Run ACRN on Ubuntu Core 20" {
    search --no-floppy --set=data_fs --label ubuntu-data
    if [ -n "$data_fs" ]; then
        loopback loop ($data_fs)/system-data/var/lib/snapd/snaps/acrn-kernel_*.snap
        multiboot --quirk-modules-after-kernel ($root)/EFI/acrn/acrn.out
        module (loop)/bzImage Linux_bzImage snapd_recovery_mode=run $cmdline apparmor=0
        module (loop)/initrd.img Linux_initrd
    fi
}
fi
